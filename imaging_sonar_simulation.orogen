name "imaging_sonar_simulation"

# include rock drivers
using_library "opencv"
using_library "gpu_sonar_simulation"
using_library "vizkit3d_normal_depth_map"
using_library "vizkit3d_world"
using_library "frame_helper"

using_task_library "vizkit3d_world"

import_types_from "base"

task_context "Task" do

    subclasses "vizkit3d_world::Task"

    # set the sonar pose using a RigidBodyState structure
    input_port("sonar_pose_cmd", "base::samples::RigidBodyState");

    # New Sonar Viewer
    output_port("sonar_viewer", ro_ptr("/base/samples/frame/Frame"));

	# Shader Viewer
    output_port("shader_viewer", ro_ptr("/base/samples/frame/Frame"));

    # Range of the sonar
    property("range", "double", 50.0).dynamic
    
    # Gain of the sonar
    property("gain", "double", 0.7).dynamic
    
    # Number of Bins
    property("number_of_bins", "int", 500).dynamic
end

task_context "ScanningSonarTask" do

    subclasses "imaging_sonar_simulation::Task"

    # Output data (SonarBeam)
    output_port("beam_samples", "base::samples::SonarBeam");
    periodic 0.1

    # Enable/disable ping pong scanning mode
    property("ping_pong_mode", "bool", false).dynamic

    # Left limit angle
    property("start_angle", "double", 0.0).dynamic

    # Right limit angle
    property("end_angle", "double", 2 * Math::PI).dynamic

    # Step angle size
    property("step_angle", "double", Math::PI / 180 * 1.8).dynamic
end

task_context "MultibeamSonarTask" do

    subclasses "imaging_sonar_simulation::Task"

    # Output data (SonarScan)
    output_port("sonar_samples", "base::samples::SonarScan");
    periodic 0.1
    
    # Number of Beams
    property("number_of_beams", "int", 256).dynamic
    
    # Angular Resolution
    property("angular_resolution", "double", Math::PI / 180).dynamic
    
    # Start Bearing
    property("start_bearing", "double", - Math::PI / 3).dynamic
end
